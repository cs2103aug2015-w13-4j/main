Parser 
//for getting the whole input and processing it
+ ProcessInput(String) : CommandElements 
add format for arraylist 
[0]:description
[1]:date
[2]:priority
[3]:recurring

edit format for arraylist
[0]:id
[1]:field
[2]:context

Logic
LAUNCH class
+ New() -> changeDirectory
+ Old() -> load() -> default()
+ EditDirectory() -> changeDirectory() -> operation(changed) 

OPERATION class
+ Input(String) : String(output to display) -> ProcessInput(String) 
+ checkCommand(CommandType) : int 
+ performCommand(int) : boolean(done or not) -> add/edit..

DISPLAY class
+ operation(CommandType) : String(output) 
//should should sort by duedate then priority
+ default () : String -> viewAll() 

Storage
+ load(): ArrayList<String>
	returns an array of strings, each containing all the info of one task. string has this format:”<id><token><name><token><date><token><priority><token><description>”. <token> is set to be “&&” (subject to change later).
+ add(ArrayList<String> taskInfo): boolean
	pass in taskInfo as ArrayList<String> using TaskEvent’s toArrayList().
+ edit(int taskID, ArrayList<String> newTaskInfo): boolean
	pass in taskID to identify; newTaskInfo using TaskEvent’s toArrayList(). newTaskInfo needs to be changed to be different from the old taskInfo associated with that taskID before passed in.
+ delete(int taskID): boolean

Utilities 
CONSTANT class
+enum CommandType{add...}

TASKEVENT class
+ toString(): String
	return a string representation of the task
+ toArrayList(): ArrayList<String>
	return an array of strings, each containing the partial info about the task. from [0] to [4]: taskID, name, date, priority, description.

COMMANDELEMENTS class
-CommandType
-ArrayList<String>


